"""
Django settings for QuestionTime project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'jtnwb)m+7bj7g*9z0((1i8!quf^acnxj0$95%62)aoj3ps+h3a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django.contrib.sites',
    # 선영이가 알려준 것처럼 sites프레임워크는 웹사이트의 domain과 name속성을 저장하는 site모델에서 파생함.
    # https://docs.djangoproject.com/en/2.2/ref/contrib/sites/
    # 위 주소에 자세히 나와있음(뭔가 유용하고 거의 무조건 써야되는 기능 같긴 함)
    # 아무튼 유데미 강사가 이걸 쓴 이유는 rest_auth.registration에 필요한 기능이라서 그런 것 같음
    # 해당 프레임워크는 설치한다고 끝나는게 아니라 밑에 SITE_ID를 정의해주고 migrate까지 해줘야 완성임

    'rest_framework',
    'rest_framework.authtoken',

    'allauth',
    'allauth.account',
    # 상단 두 줄은 rest_auth.registraion의 일환
    'allauth.socialaccount',

    'rest_auth',
    'rest_auth.registration',

    'crispy_forms',
    # 주요기능1 : |crispy filter
    # 주요기능2 : {% crispy %}태그
    # 이 두 기능으로 인해 코드 중복 없이(dry하게) 장고 form을 사용할 수 있음
    # 따로 form template을 커스텀할 필요가 없음

    'webpack_loader',

    'users',
    'questions'
    # 정의한 model을 쓰기 위해 django에 알려주는 역할
    # python manage.py migrate을 실행하기 위한 선행조건
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'QuestionTime.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
# DIRS는 엔진이 템플릿 소스 파일을 찾아야 할 디렉토리 리스트를 정의한다.
        'APP_DIRS': True,
# APP_DIRS는 엔진이 설치된 앱 폴더 내에서 템플릿을 찾아야 하는지의 여부를 알려줌.
# 그런데 그러면 우리가 기존 장고에서 하던 것처럼 템플릿 폴더가 앱 폴더 내에 위치해야 하는거 아님?
# Single Page Application 개념 때문에 위치가 저런건가...
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'QuestionTime.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOGIN_URL = "accounts/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"
# 위의 세 줄은 인증 관련 기본 변수임!


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "assets"),
    os.path.join(BASE_DIR, "frontend/dist"),
]

# STATIC_ROOT = "" # The absolute path to the directory where collectstatic will collect static files for deployment.

# Custom User Model
AUTH_USER_MODEL = "users.CustomUser"
# 기본 user모델을 커스텀 유저모델로 오버라이드

# django-crispy-forms
CRISPY_TEMPLATE_PACK = "bootstrap4"
# 부트스트랩으로 form을 이쁘게 꾸밈

# django.contrib.sites
SITE_ID = 1
# 디폴트 값은 정의되지 않았음. 
# 현재 사이트가 django_site db테이블 안에서 가지는 ID값임
# 앱의 데이터가 특정 사이트에 연결될 수 있고, 하나의 db가 여러 사이트의 내용을 관리할 수 있도록 함.



ACCOUNT_EMAIL_VERIFICATION = "none"
# mandatory, optional, none 세 가지 값이 있는데 기본값은 optional이다.
# django-allauth의 일환

ACCOUNT_EMAIL_REQUIRED = (True)
# 기본값은 False임
# django-allauth의 일환

# Django-REST-Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        # 토큰 인증을 위한 설정2
        # settings.py의 토큰 설정을 마치고는 migrate을 해줘야 한다.(db에 영향을 주는 모양임)

        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 2
}

WEBPACK_LOADER = {
    'DEFAULT': {
        'BUNDLE_DIR_NAME': 'dist/',
        'STATS_FILE': os.path.join(BASE_DIR, 'frontend', 'webpack-stats.json'),
    }
}